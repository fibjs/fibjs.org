
/*! @brief 缓存读取对象
    @brief Buffer reader object

 BufferedReader 对象用于对二进制流对象数据进行缓存，并提供文本读取能力，仅支持 utf-8 格式转换。创建方法：
 BufferedReader object is used for caching the binary data stream object. It also provides text reading 
function which only support utf-8 format conversion. Create method:  
 @code
 var reader = new io.BufferedStream(stream);
 @endcode
 */
interface BufferedStream : Stream
{
    /*! @brief BufferedStream 构造函数
      @param stm BufferedStream 的二进制基础流对象

	@brief BufferedStream Constructor
      @param stm The binary base stream of the bufferedStream
     */
    BufferedStream(Stream stm);

    /*! @brief 读取指定字符的文本
     @param size 指定读取的文本字符个数，以 utf8 或者指定的编码字节数为准
     @return 返回读取的文本字符串，若无数据可读，或者连接中断，则返回 null

	@brief Read the text by the specified size  
     @param size The size of the text to read. The size is measured in utf8 format or another specified code format. 
     @return The text to read. If no data to read or the connection is interrupted, return null.
     */
    String readText(Integer size) async;

    /*! @brief 读取一行文本，行结尾标识基于 EOL 属性的设置，缺省时，posix:\"\\n\"；windows:\"\\r\\n\"
     @param maxlen 指定此次读取的最大字符串，以 utf8 编码字节数为准，缺省不限制字符数
     @return 返回读取的文本字符串，若无数据可读，或者连接中断，则返回 null

	@brief Read a line of text which ends with EOL, by default it ends with, posix:\"\\n\"；windows:\"\\r\\n\"
     @param maxlen The maximum length of the string to read, measured in utf8 format, by default it is unlimited. 
     @return The text to read. If no data to read or the connection is interrupted, return null.
     */
    String readLine(Integer maxlen = -1) async;

    /*! @brief 以数组方式读取一组文本行，行结尾标识基于 EOL 属性的设置，缺省时，posix:\"\\n\"；windows:\"\\r\\n\"
     @param maxlines 指定此次读取的最大行数，缺省读取全部文本行
     @return 返回读取的文本行数组，若无数据可读，或者连接中断，空数组

	@brief Read a line of text which ends with EOL, by default it ends with, posix:\"\\n\"；windows:\"\\r\\n\"
     @param maxlines The maximum lines of the text to read, by default it reads all of the lines.
     @return The array of the lines to read. If no data to read or the connection is interrupted, return an empty array. 
     */
    Array readLines(Integer maxlines = -1);

    /*! @brief 读取一个文本字符串，以指定的字节为结尾
     @param mk 指定结尾的字符串
     @param maxlen 指定此次读取的最大字符串，以 utf8 编码字节数为准，缺省不限制字符数
     @return 返回读取的文本字符串，若无数据可读，或者连接中断，则返回 null

	@brief Read a text string which ends with specified string 
     @param mk The specified string with which the text string to read ends
     @return The string to read. If no data to read or the connection is interrupted, return null.
     */
    String readUntil(String mk, Integer maxlen = -1) async;

    /*! @brief 读取一个二进制数据包
     @param limit 指定此次读取的最大字节数，超出则抛出错误
     @return 返回读取的二进制数据块，若无数据可读，或者连接中断，则返回 null

	@brief Read a binary data packet
     @param limit The maximum number of the byte to read. Throw an error when overread.
     @return The binary data block to read. If no data to read or the connection is interrupted, return null.
     */
    Buffer readPacket(Integer limit = -1) async;

    /*! @brief 写入一个字符串
     @param txt 指定写入的字符串

	@brief Write a string
     @param txt The string to write
     */
    writeText(String txt) async;

    /*! @brief 写入一个字符串，并写入换行符
     @param txt 指定写入的字符串

	@brief Write a string and a line break
     @param txt The string to write
     */
    writeLine(String txt) async;

    /*! @brief 写入一个二进制数据包
     @param data 指定写入的二进制数据

	@brief Write a binary data packet
     @param data The binary data to write
     */
    writePacket(Buffer data) async;

    /*! @brief 查询创建缓存对象时的流对象 */
    /*! @brief Query the stream object when creating the buffer object */
    readonly Stream stream;

    /*! @brief 查询和设置当前对象处理文本时的字符集，缺省为 utf-8 */
    /*! @brief Query and set the character set of the text being handled, by default it is utf-8 */
    String charset;

    /*! @brief 查询和设置行结尾标识，缺省时，posix:\"\\n\"；windows:\"\\r\\n\"   */
    /*! @brief Query and set the EOL syntax, by default it is posix:\"\\n\"；windows:\"\\r\\n\"   */
    String EOL;
};

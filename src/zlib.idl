
/*! @brief zlib compress/uncompress module

 How to use：
 @code
 var zlib = require('zlib');
 @endcode
 */
module zlib
{
    /*! @brief deflate compression level，default is 0 (no compression)*/
    const Integer NO_COMPRESSION = 0;

    /*! @brief deflate compression level, set compression speed*/
    const Integer BEST_SPEED = 1;

    /*! @brief deflate compression level，set highest compression level */
    const Integer BEST_COMPRESSION = 9;

    /*! @brief deflate compression level, set default compression level*/
    const Integer DEFAULT_COMPRESSION = -1;

    /*! @brief using deflate algorithm for compression
     @param data the data need to be compressed
     @param level set compression level，default set to DEFAULT_COMPRESSION
     @return binary data as compression result
     */
    static Buffer deflate(Buffer data, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 使用 deflate 算法压缩数据到流对象中
     @param data 给定要压缩的数据
     @param stm 指定存储压缩数据的流
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     */
    static deflateTo(Buffer data, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 使用 deflate 算法压缩源流中的数据到流对象中
     @param src 给定要压缩的数据所在的流
     @param stm 指定存储压缩数据的流
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     */
    static deflateTo(Stream src, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 解压缩 deflate 算法压缩的数据
     @param data 给定压缩后的数据
     @return 返回解压缩后的二进制数据
     */
    static Buffer inflate(Buffer data) async;

    /*! @brief 解压缩 deflate 算法压缩的数据到流对象中
     @param data 给定要解压缩的数据
     @param stm 指定存储解压缩数据的流
     */
    static inflateTo(Buffer data, Stream stm) async;

    /*! @brief 解压缩源流中 deflate 算法压缩的数据到流对象中
     @param src 给定要解压缩的数据所在的流
     @param stm 指定存储解压缩数据的流
     */
    static inflateTo(Stream src, Stream stm) async;

    /*! @brief 使用 gzip 算法压缩数据
     @param data 给定要压缩的数据
     @return 返回压缩后的二进制数据
     */
    static Buffer gzip(Buffer data) async;

    /*! @brief 使用 gzip 算法压缩数据到流对象中
     @param data 给定要压缩的数据
     @param stm 指定存储压缩数据的流
     */
    static gzipTo(Buffer data, Stream stm) async;

    /*! @brief 使用 gzip 算法压缩源流中的数据到流对象中
     @param src 给定要压缩的数据所在的流
     @param stm 指定存储压缩数据的流
     */
    static gzipTo(Stream src, Stream stm) async;

    /*! @brief 解压缩 gzip 算法压缩的数据
     @param data 给定压缩后的数据
     @return 返回解压缩后的二进制数据
     */
    static Buffer gunzip(Buffer data) async;

    /*! @brief 解压缩 gzip 算法压缩的数据到流对象中
     @param data 给定要解压缩的数据
     @param stm 指定存储解压缩数据的流
     */
    static gunzipTo(Buffer data, Stream stm) async;

    /*! @brief 解压缩源流中 gzip 算法压缩的数据到流对象中
     @param src 给定要解压缩的数据所在的流
     @param stm 指定存储解压缩数据的流
     */
    static gunzipTo(Stream src, Stream stm) async;
};
